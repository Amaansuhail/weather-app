{"version":3,"sources":["api/Fetchdata.js","App.js","reportWebVitals.js","index.js"],"names":["Fetchdata","query","a","axios","get","params","q","units","APPID","data","App","useState","setquery","weather","setWeather","search","e","key","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAIaA,EAAS,uCAAE,WAAOC,GAAP,iBAAAC,EAAA,sEACAC,IAAMC,IAJlB,kDAI4B,CACjCC,OAAQ,CACPC,EAAGL,EACHM,MAAO,SACPC,MAPQ,sCAEQ,uBACdC,EADc,EACdA,KADc,kBAUdA,GAVc,2CAAF,sD,eC8CPC,MA9Cf,WACG,MAA0BC,mBAAS,IAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACMC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACD,UAAVc,EAAEC,IADS,gCAESjB,EAAUC,GAFnB,OAEJQ,EAFI,OAGTK,EAAWL,GACXG,EAAS,IAJA,2CAAH,sDAQb,OACE,sBAAKM,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,8BACF,uBACEC,KAAK,OACLD,UAAU,SACVE,YAAY,wBACZC,MAAOpB,EACPqB,SAAU,SAACN,GAAD,OAAOJ,EAASI,EAAEO,OAAOF,QACnCG,WAAYT,IAKXF,EAAQY,MACC,sBAAKP,UAAU,OAAf,UACI,qBAAIA,UAAU,YAAd,UACI,+BAAOL,EAAQa,OACf,8BAAMb,EAAQc,IAAIC,aAEtB,sBAAKV,UAAU,YAAf,UACKW,KAAKC,MAAMjB,EAAQY,KAAKM,MACzB,2CAEJ,sBAAKb,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYc,IAAG,4CAAuCnB,EAAQA,QAAQ,GAAGoB,KAA1D,WAAyEC,IAAKrB,EAAQA,QAAQ,GAAGsB,cAC/H,4BAAItB,EAAQA,QAAQ,GAAGsB,wBC7BhCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8ddde2eb.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = 'f33a484cf794d08d0148764789aaba32';\r\n\r\nexport const Fetchdata =async (query) => {\r\n   const {data} = await axios.get(URL , {\r\n       params: {\r\n        q: query,\r\n        units: 'metric',\r\n        APPID: API_KEY,\r\n       }\r\n\r\n\r\n   })\r\n   return data\r\n}","import React, {useState} from 'react'\nimport {Fetchdata} from './api/Fetchdata'\nimport './App.css';\n\nfunction App() {\n   const [query, setquery] = useState('')\n   const [weather, setWeather] = useState({});\n   const search = async (e) => {\n    if(e.key === 'Enter') {\n        const data = await Fetchdata(query);\n         setWeather(data);\n         setquery('')\n      \n    }\n}\n  return (\n    <div className=\"main-container\">\n      <h1 className=\"amaan\">WHEATHER   IN...</h1>\n    <input\n      type=\"text\"\n      className=\"search\"\n      placeholder=\"Enter the location...\"\n      value={query}\n      onChange={(e) => setquery(e.target.value) }\n      onKeyPress={search}\n\n    \n    \n    ></input>\n      {weather.main && (\n                <div className=\"city\">\n                    <h2 className=\"city-name\">\n                        <span>{weather.name}</span>\n                        <sup>{weather.sys.country}</sup>\n                    </h2>\n                    <div className=\"city-temp\">\n                        {Math.round(weather.main.temp)}\n                        <sup>&deg;C</sup>\n                    </div>\n                    <div className=\"info\">\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\n                        <p>{weather.weather[0].description}</p>\n                    </div>\n                </div>\n            )}\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}